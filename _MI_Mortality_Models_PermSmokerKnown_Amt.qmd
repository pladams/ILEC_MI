## Perm Model, Smoker Distinct

```{r}
#| output: false

dat.perm.knw <- readRDS("dat.perm.rds")
dat.perm.knw <- dat.perm.knw[Policies_Exposed > 0]
dat.perm.knw <- dat.perm.knw[!(UW == "U/U/U" &
                               Insurance_Plan == "Perm")]

AA.brks <- c(-1,17,
             seq(25,120,5))
AA.lbls <- paste0(
  AA.brks[1:(length(AA.brks)-1)]+1,
  "-",
  AA.brks[2:length(AA.brks)]
)

Dur.brks <- c(0,1,2,3,5,10,15,20,30,120)
Dur.lbls <- paste0(
  Dur.brks[1:(length(Dur.brks)-1)]+1,
  "-",
  Dur.brks[2:length(Dur.brks)]
)

dat.perm.knw[,`:=`(
  AA_Grp=cut(Attained_Age,
              breaks=AA.brks,
              labels=AA.lbls),
  Dur_Grp=cut(Duration,
               breaks=Dur.brks,
               labels=Dur.lbls)
)]



pred.cols <- names(dat.perm.knw)[c(1,5,6,15:17)]

factor.cols <- pred.cols

dat.perm.knw[,
      (factor.cols):=lapply(.SD,factor),
      .SDcols=factor.cols]

UW.levels<-data.table(UW.levels=dat.perm.knw[,levels(UW)])
UW.levels[,c("NS","Pref_Class","NClasses"):=tstrsplit(UW.levels,"/")]
setkeyv(UW.levels,c("NS","NClasses","Pref_Class"))

set.seed(traintest.seed)
dat.perm.knw %>%
  mutate(
    IsTraining = (runif(nrow(.)) < training.fraction),
    Noise = rnorm(nrow(.)),
    .before = 1
  ) %>% 
  mutate(Face_Amount_Band=fct_relabel(
    Face_Amount_Band,
    #function(.) sub(":"," -",.,fixed=T)
    function(.) fa.remap[Face_Amount_Band.Old==.,Face_Amount_Band.New]
    ),
    AE_Count=Death_Count/ExpDth_Cnt_VBT2015,
    AE_Amount=Death_Claim_Amount/ExpDth_Amt_VBT2015,
    UW=factor(UW,levels=UW.levels$UW.levels)
  ) -> 
  dat.perm.knw

gbm.pred.cols <- c("Noise",pred.cols)
```

Here is a data preview.

```{r}
dat.perm.knw %>%
  head(10) %>%
  flextable()
```

### Feature Discovery with Catboost


```{r}

dat.perm.knw %>% 
  filter(IsTraining == TRUE) %>% 
  select(all_of(gbm.pred.cols)) %>% 
  mutate(Sex = as.numeric(Sex)) %>%
  catboost.load_pool(
    data=.,
    label = dat.perm.knw[IsTraining==TRUE,AE_Amount],
    weight = dat.perm.knw[IsTraining==TRUE,ExpDth_Amt_VBT2015]) ->
  train_pool_perm_knw

dat.perm.knw %>% 
  filter(IsTraining == FALSE) %>% 
  select(all_of(gbm.pred.cols)) %>% 
  mutate(Sex = as.numeric(Sex)) %>%
  catboost.load_pool(
    data=.,
    label = dat.perm.knw[IsTraining==FALSE,AE_Amount],
    weight = dat.perm.knw[IsTraining==FALSE,ExpDth_Amt_VBT2015]) ->
  test_pool_perm_knw

if(bUseCache & file.exists(
  'dat.term.mod.perm.knw.cbm'
) & !bInvalidateCaches)
{
  cb.model.perm.knw <- catboost.load_model(model_path = 'dat.term.mod.perm.knw.cbm')
} else {
  cb.model.perm.knw <- catboost.train(learn_pool=train_pool_perm_knw,
                             test_pool = test_pool_perm_knw,
                             params=fit_params)
  
  catboost.save_model(cb.model.perm.knw,
                      model_path = 'dat.term.mod.perm.knw.cbm')
}
```

### Feature Importance

Next is to check for the variables with most variability. It is notable that Sex has mean influence not dissimilar to Noise.

```{r}

shp.perm.knw <- shapviz(
  cb.model.perm.knw,
  X=as.data.frame(dat.perm.knw[IsTraining==TRUE,..gbm.pred.cols]),
  X_pred=train_pool_perm_knw
)
setDT(shp.perm.knw$X)
shp.perm.knw$X[,c("NS","Pref_Class","NClasses"):=tstrsplit(UW,"/")]

sv_importance(shp.perm.knw) + theme_minimal()

```

### Feature Interactions

The top three interactions are face amount band with each of underwriting, duration, and insurance plan. Sex is notably weakly interacting with other variables.

```{r}
imp.int.perm.knw <- catboost.get_feature_importance(
  cb.model.perm.knw,
  type="Interaction"
)



mod.ft.map.perm.knw <- data.table(
  FeatureNames=names(dat.perm.knw[IsTraining==TRUE,..gbm.pred.cols])
)

mod.ft.map.perm.knw[,ID:=1:nrow(.SD)-1]

imp.int.perm.knw %>%
  merge(mod.ft.map.perm.knw,
        by.x="feature1_index",
        by.y="ID") %>%
  merge(mod.ft.map.perm.knw,
        by.x="feature2_index",
        by.y="ID") %>%
  setnames(
    old=c("FeatureNames.x","FeatureNames.y"),
    new=c("Feature1","Feature2")
  ) %>% 
  mutate(feature1_index=NULL,feature2_index=NULL) %>%
  as.data.table() %>%
  setcolorder(c("Feature1","Feature2","score")) -> 
  imp.int.perm.knw

imp.int.perm.knw[order(-score)] %>%
  filter(Feature1 != "Noise") %>%
  flextable() %>%
  colformat_double(j="score",digits = 2)
```

### Feature Interaction Plots

Each of the interactions are discussed below with plots using SHAP values from both sides of the interaction.

#### UW

##### Face Amount Band SHAPs

There does not appear to be a meaningful interaction between underwriting and face amount band embedded in the face amount band SHAP values.

::: panel-tabset
###### Smoker Class: Non-smoker, Preferred Classes: Unknown
```{r}
#| message: false
#| warning: false
data.table(
  cbind(
    shp.perm.knw$X[,.(Face_Amount_Band,
                    NS,
                    Pref_Class,
                    NClasses)],
    shap=shp.perm.knw$S[,"Face_Amount_Band"],
    response=dat.perm.knw[IsTraining==TRUE,AE_Amount],
    offset=dat.perm.knw[IsTraining==TRUE,ExpDth_Amt_VBT2015]
  )
) %>%
  mutate(NS=factor(NS),Pref_Class=factor(Pref_Class))  %>%
  filter(NS == 'NS' & NClasses == 'U') %>%
  ggplot(aes(y=Face_Amount_Band, x=exp(shap),color=Pref_Class,fill=Pref_Class)) +
  stat_density_ridges(alpha=0.9/4,scale=1,quantile_lines = T,quantiles = 0.5) + 
  scale_x_continuous(labels = scales::percent,
                     name="Exponentiated SHAP Value (% relative to Offset)") +
  scale_color_viridis_d() +
  scale_fill_viridis_d() +
  ggtitle(label=paste0("Ridge plot of SHAP values for Effect Face_Amount_Band"),
          subtitle = paste0("for non-smokers, unknown preferred classes")) +
  theme_minimal()

```

###### Smoker Class: Non-smoker, Preferred Classes: 2
```{r}
#| message: false
#| warning: false
data.table(
  cbind(
    shp.perm.knw$X[,.(Face_Amount_Band,
                    NS,
                    Pref_Class,
                    NClasses)],
    shap=shp.perm.knw$S[,"Face_Amount_Band"],
    response=dat.perm.knw[IsTraining==TRUE,AE_Amount],
    offset=dat.perm.knw[IsTraining==TRUE,ExpDth_Amt_VBT2015]
  )
) %>%
  mutate(NS=factor(NS),Pref_Class=factor(Pref_Class))  %>%
  filter(NS == 'NS' & NClasses == '2') %>%
  ggplot(aes(y=Face_Amount_Band, x=exp(shap),color=Pref_Class,fill=Pref_Class)) +
  stat_density_ridges(alpha=0.9/4,scale=1,quantile_lines = T,quantiles = 0.5) + 
  scale_x_continuous(labels = scales::percent,
                     name="Exponentiated SHAP Value (% relative to Offset)") +
  scale_color_viridis_d() +
  scale_fill_viridis_d() +
  ggtitle(label=paste0("Ridge plot of SHAP values for Effect Face_Amount_Band"),
          subtitle = paste0("for non-smokers, 2 preferred classes")) +
  theme_minimal()

```

###### Smoker Class: Non-smoker, Preferred Classes: 3
```{r}
#| message: false
#| warning: false
data.table(
  cbind(
    shp.perm.knw$X[,.(Face_Amount_Band,
                    NS,
                    Pref_Class,
                    NClasses)],
    shap=shp.perm.knw$S[,"Face_Amount_Band"],
    response=dat.perm.knw[IsTraining==TRUE,AE_Amount],
    offset=dat.perm.knw[IsTraining==TRUE,ExpDth_Amt_VBT2015]
  )
) %>%
  mutate(NS=factor(NS),Pref_Class=factor(Pref_Class))  %>%
  filter(NS == 'NS' & NClasses == '3') %>%
  ggplot(aes(y=Face_Amount_Band, x=exp(shap),color=Pref_Class,fill=Pref_Class)) +
  stat_density_ridges(alpha=0.9/4,scale=1,quantile_lines = T,quantiles = 0.5) + 
  scale_x_continuous(labels = scales::percent,
                     name="Exponentiated SHAP Value (% relative to Offset)") +
  scale_color_viridis_d() +
  scale_fill_viridis_d() +
  ggtitle(label=paste0("Ridge plot of SHAP values for Effect Face_Amount_Band"),
          subtitle = paste0("for non-smokers, 3 preferred classes")) +
  theme_minimal()

```

###### Smoker Class: Non-smoker, Preferred Classes: 4
```{r}
#| message: false
#| warning: false
data.table(
  cbind(
    shp.perm.knw$X[,.(Face_Amount_Band,
                    NS,
                    Pref_Class,
                    NClasses)],
    shap=shp.perm.knw$S[,"Face_Amount_Band"],
    response=dat.perm.knw[IsTraining==TRUE,AE_Amount],
    offset=dat.perm.knw[IsTraining==TRUE,ExpDth_Amt_VBT2015]
  )
) %>%
  mutate(NS=factor(NS),Pref_Class=factor(Pref_Class))  %>%
  filter(NS == 'NS' & NClasses == '4') %>%
  ggplot(aes(y=Face_Amount_Band, x=exp(shap),color=Pref_Class,fill=Pref_Class)) +
  stat_density_ridges(alpha=0.9/4,scale=1,quantile_lines = T,quantiles = 0.5) + 
  scale_x_continuous(labels = scales::percent,
                     name="Exponentiated SHAP Value (% relative to Offset)") +
  scale_color_viridis_d() +
  scale_fill_viridis_d() +
  ggtitle(label=paste0("Ridge plot of SHAP values for Effect Face_Amount_Band"),
          subtitle = paste0("for non-smokers, 4 preferred classes")) +
  theme_minimal()

```

###### Smoker Class: Smoker, Preferred Classes: Unknown
```{r}
#| message: false
#| warning: false
data.table(
  cbind(
    shp.perm.knw$X[,.(Face_Amount_Band,
                    NS,
                    Pref_Class,
                    NClasses)],
    shap=shp.perm.knw$S[,"Face_Amount_Band"],
    response=dat.perm.knw[IsTraining==TRUE,AE_Amount],
    offset=dat.perm.knw[IsTraining==TRUE,ExpDth_Amt_VBT2015]
  )
) %>%
  mutate(NS=factor(NS),Pref_Class=factor(Pref_Class))  %>%
  filter(NS == 'S' & NClasses == 'U') %>%
  ggplot(aes(y=Face_Amount_Band, x=exp(shap),color=Pref_Class,fill=Pref_Class)) +
  stat_density_ridges(alpha=0.9/4,scale=1,quantile_lines = T,quantiles = 0.5) + 
  scale_x_continuous(labels = scales::percent,
                     name="Exponentiated SHAP Value (% relative to Offset)") +
  scale_color_viridis_d() +
  scale_fill_viridis_d() +
  ggtitle(label=paste0("Ridge plot of SHAP values for Effect Face_Amount_Band"),
          subtitle = paste0("for smokers, unknown preferred classes")) +
  theme_minimal()

```

###### Smoker Class: Smoker, Preferred Classes: 2
```{r}
#| message: false
#| warning: false
data.table(
  cbind(
    shp.perm.knw$X[,.(Face_Amount_Band,
                    NS,
                    Pref_Class,
                    NClasses)],
    shap=shp.perm.knw$S[,"Face_Amount_Band"],
    response=dat.perm.knw[IsTraining==TRUE,AE_Amount],
    offset=dat.perm.knw[IsTraining==TRUE,ExpDth_Amt_VBT2015]
  )
) %>%
  mutate(NS=factor(NS),Pref_Class=factor(Pref_Class))  %>%
  filter(NS == 'S' & NClasses == '2') %>%
  ggplot(aes(y=Face_Amount_Band, x=exp(shap),color=Pref_Class,fill=Pref_Class)) +
  stat_density_ridges(alpha=0.9/4,scale=1,quantile_lines = T,quantiles = 0.5) + 
  scale_x_continuous(labels = scales::percent,
                     name="Exponentiated SHAP Value (% relative to Offset)") +
  scale_color_viridis_d() +
  scale_fill_viridis_d() +
  ggtitle(label=paste0("Ridge plot of SHAP values for Effect Face_Amount_Band"),
          subtitle = paste0("for smokers, 2 preferred classes")) +
  theme_minimal()

```

###### Smoker Class: Unismokers
```{r}
#| message: false
#| warning: false
data.table(
  cbind(
    shp.perm.knw$X[,.(Face_Amount_Band,
                    NS,
                    Pref_Class,
                    NClasses)],
    shap=shp.perm.knw$S[,"Face_Amount_Band"],
    response=dat.perm.knw[IsTraining==TRUE,AE_Amount],
    offset=dat.perm.knw[IsTraining==TRUE,ExpDth_Amt_VBT2015]
  )
) %>%
  mutate(NS=factor(NS),Pref_Class=factor(Pref_Class))  %>%
  filter(NS == 'U') %>%
  ggplot(aes(y=Face_Amount_Band, x=exp(shap),color=Pref_Class,fill=Pref_Class)) +
  stat_density_ridges(alpha=0.9/4,scale=1,quantile_lines = T,quantiles = 0.5) + 
  scale_x_continuous(labels = scales::percent,
                     name="Exponentiated SHAP Value (% relative to Offset)") +
  scale_color_viridis_d() +
  scale_fill_viridis_d() +
  ggtitle(label=paste0("Ridge plot of SHAP values for Effect Face_Amount_Band"),
          subtitle = paste0("for unismokers")) +
  theme_minimal()

```
:::

##### UW SHAPs

The notable interaction here is that the distinction between best and second best of three non-smoker classes appears to collapse below 100K.

::: panel-tabset
###### Smoker Class: Non-smoker, Preferred Classes: Unknown
```{r}
#| message: false
#| warning: false
data.table(
  cbind(
    shp.perm.knw$X[,.(Face_Amount_Band,
                    NS,
                    Pref_Class,
                    NClasses)],
    shap=shp.perm.knw$S[,"UW"],
    response=dat.perm.knw[IsTraining==TRUE,AE_Amount],
    offset=dat.perm.knw[IsTraining==TRUE,ExpDth_Amt_VBT2015]
  )
) %>%
  mutate(NS=factor(NS),Pref_Class=factor(Pref_Class))  %>%
  filter(NS == 'NS' & NClasses == 'U') %>%
  ggplot(aes(y=Face_Amount_Band, x=exp(shap),color=Pref_Class,fill=Pref_Class)) +
  stat_density_ridges(alpha=0.9/4,scale=1,quantile_lines = T,quantiles = 0.5) + 
  scale_x_continuous(labels = scales::percent,
                     name="Exponentiated SHAP Value (% relative to Offset)") +
  scale_color_viridis_d() +
  scale_fill_viridis_d() +
  ggtitle(label=paste0("Ridge plot of SHAP values for Effect UW"),
          subtitle = paste0("for non-smokers, unknown preferred classes")) +
  theme_minimal()

```

###### Smoker Class: Non-smoker, Preferred Classes: 2
```{r}
#| message: false
#| warning: false
data.table(
  cbind(
    shp.perm.knw$X[,.(Face_Amount_Band,
                    NS,
                    Pref_Class,
                    NClasses)],
    shap=shp.perm.knw$S[,"UW"],
    response=dat.perm.knw[IsTraining==TRUE,AE_Amount],
    offset=dat.perm.knw[IsTraining==TRUE,ExpDth_Amt_VBT2015]
  )
) %>%
  mutate(NS=factor(NS),Pref_Class=factor(Pref_Class))  %>%
  filter(NS == 'NS' & NClasses == '2') %>%
  ggplot(aes(y=Face_Amount_Band, x=exp(shap),color=Pref_Class,fill=Pref_Class)) +
  stat_density_ridges(alpha=0.9/4,scale=1,quantile_lines = T,quantiles = 0.5) + 
  scale_x_continuous(labels = scales::percent,
                     name="Exponentiated SHAP Value (% relative to Offset)") +
  scale_color_viridis_d() +
  scale_fill_viridis_d() +
  ggtitle(label=paste0("Ridge plot of SHAP values for Effect UW"),
          subtitle = paste0("for non-smokers, 2 preferred classes")) +
  theme_minimal()

```

###### Smoker Class: Non-smoker, Preferred Classes: 3
```{r}
#| message: false
#| warning: false
data.table(
  cbind(
    shp.perm.knw$X[,.(Face_Amount_Band,
                    NS,
                    Pref_Class,
                    NClasses)],
    shap=shp.perm.knw$S[,"UW"],
    response=dat.perm.knw[IsTraining==TRUE,AE_Amount],
    offset=dat.perm.knw[IsTraining==TRUE,ExpDth_Amt_VBT2015]
  )
) %>%
  mutate(NS=factor(NS),Pref_Class=factor(Pref_Class))  %>%
  filter(NS == 'NS' & NClasses == '3') %>%
  ggplot(aes(y=Face_Amount_Band, x=exp(shap),color=Pref_Class,fill=Pref_Class)) +
  stat_density_ridges(alpha=0.9/4,scale=1,quantile_lines = T,quantiles = 0.5) + 
  scale_x_continuous(labels = scales::percent,
                     name="Exponentiated SHAP Value (% relative to Offset)") +
  scale_color_viridis_d() +
  scale_fill_viridis_d() +
  ggtitle(label=paste0("Ridge plot of SHAP values for Effect UW"),
          subtitle = paste0("for non-smokers, 3 preferred classes")) +
  theme_minimal()

```

###### Smoker Class: Non-smoker, Preferred Classes: 4
```{r}
#| message: false
#| warning: false
data.table(
  cbind(
    shp.perm.knw$X[,.(Face_Amount_Band,
                    NS,
                    Pref_Class,
                    NClasses)],
    shap=shp.perm.knw$S[,"UW"],
    response=dat.perm.knw[IsTraining==TRUE,AE_Amount],
    offset=dat.perm.knw[IsTraining==TRUE,ExpDth_Amt_VBT2015]
  )
) %>%
  mutate(NS=factor(NS),Pref_Class=factor(Pref_Class))  %>%
  filter(NS == 'NS' & NClasses == '4') %>%
  ggplot(aes(y=Face_Amount_Band, x=exp(shap),color=Pref_Class,fill=Pref_Class)) +
  stat_density_ridges(alpha=0.9/4,scale=1,quantile_lines = T,quantiles = 0.5) + 
  scale_x_continuous(labels = scales::percent,
                     name="Exponentiated SHAP Value (% relative to Offset)") +
  scale_color_viridis_d() +
  scale_fill_viridis_d() +
  ggtitle(label=paste0("Ridge plot of SHAP values for Effect UW"),
          subtitle = paste0("for non-smokers, 4 preferred classes")) +
  theme_minimal()

```

###### Smoker Class: Smoker, Preferred Classes: Unknown
```{r}
#| message: false
#| warning: false
data.table(
  cbind(
    shp.perm.knw$X[,.(Face_Amount_Band,
                    NS,
                    Pref_Class,
                    NClasses)],
    shap=shp.perm.knw$S[,"UW"],
    response=dat.perm.knw[IsTraining==TRUE,AE_Amount],
    offset=dat.perm.knw[IsTraining==TRUE,ExpDth_Amt_VBT2015]
  )
) %>%
  mutate(NS=factor(NS),Pref_Class=factor(Pref_Class))  %>%
  filter(NS == 'S' & NClasses == 'U') %>%
  ggplot(aes(y=Face_Amount_Band, x=exp(shap),color=Pref_Class,fill=Pref_Class)) +
  stat_density_ridges(alpha=0.9/4,scale=1,quantile_lines = T,quantiles = 0.5) + 
  scale_x_continuous(labels = scales::percent,
                     name="Exponentiated SHAP Value (% relative to Offset)") +
  scale_color_viridis_d() +
  scale_fill_viridis_d() +
  ggtitle(label=paste0("Ridge plot of SHAP values for Effect UW"),
          subtitle = paste0("for smokers, unknown preferred classes")) +
  theme_minimal()

```

###### Smoker Class: Smoker, Preferred Classes: 2
```{r}
#| message: false
#| warning: false
data.table(
  cbind(
    shp.perm.knw$X[,.(Face_Amount_Band,
                    NS,
                    Pref_Class,
                    NClasses)],
    shap=shp.perm.knw$S[,"UW"],
    response=dat.perm.knw[IsTraining==TRUE,AE_Amount],
    offset=dat.perm.knw[IsTraining==TRUE,ExpDth_Amt_VBT2015]
  )
) %>%
  mutate(NS=factor(NS),Pref_Class=factor(Pref_Class))  %>%
  filter(NS == 'S' & NClasses == '2') %>%
  ggplot(aes(y=Face_Amount_Band, x=exp(shap),color=Pref_Class,fill=Pref_Class)) +
  stat_density_ridges(alpha=0.9/4,scale=1,quantile_lines = T,quantiles = 0.5) + 
  scale_x_continuous(labels = scales::percent,
                     name="Exponentiated SHAP Value (% relative to Offset)") +
  scale_color_viridis_d() +
  scale_fill_viridis_d() +
  ggtitle(label=paste0("Ridge plot of SHAP values for Effect UW"),
          subtitle = paste0("for smokers, 2 preferred classes")) +
  theme_minimal()

```

###### Smoker Class: Unismokers
```{r}
#| message: false
#| warning: false
data.table(
  cbind(
    shp.perm.knw$X[,.(Face_Amount_Band,
                    NS,
                    Pref_Class,
                    NClasses)],
    shap=shp.perm.knw$S[,"UW"],
    response=dat.perm.knw[IsTraining==TRUE,AE_Amount],
    offset=dat.perm.knw[IsTraining==TRUE,ExpDth_Amt_VBT2015]
  )
) %>%
  mutate(NS=factor(NS),Pref_Class=factor(Pref_Class))  %>%
  filter(NS == 'U') %>%
  ggplot(aes(y=Face_Amount_Band, x=exp(shap),color=Pref_Class,fill=Pref_Class)) +
  stat_density_ridges(alpha=0.9/4,scale=1,quantile_lines = T,quantiles = 0.5) + 
  scale_x_continuous(labels = scales::percent,
                     name="Exponentiated SHAP Value (% relative to Offset)") +
  scale_color_viridis_d() +
  scale_fill_viridis_d() +
  ggtitle(label=paste0("Ridge plot of SHAP values for Effect UW"),
          subtitle = paste0("for unismokers")) +
  theme_minimal()

```
:::

#### Insurance Plan

##### Face Amount Band SHAPs

Outside of the "Other" plan, it is difficult to identify an interaction within the face amount band SHAP values.

```{r}
#| message: false
#| warning: false
data.table(
  cbind(
    shp.perm.knw$X[,.(Face_Amount_Band,
                      Insurance_Plan)],
    shap=shp.perm.knw$S[,"Face_Amount_Band"]
  )
) %>%
  ggplot(aes(y=Insurance_Plan, x=exp(shap),color=Face_Amount_Band,fill=Face_Amount_Band)) +
  stat_density_ridges(alpha=0.9/4,scale=1,quantile_lines = T,quantiles = 0.5) + 
  scale_x_continuous(labels = scales::percent,
                     name="Exponentiated SHAP Value (% relative to Offset)") +
  scale_color_viridis_d() +
  scale_fill_viridis_d() +
  ggtitle(label=paste0("Ridge plot of SHAP values for Effect Face_Amount_Band"),
          subtitle = paste0("by insurance plan")) +
  theme_minimal()
```

##### Insurance Plan SHAPs

There is some interaction of UL and face amounts under 1M, with UL from 50K - < 1M being markedly higher than the others.

```{r}
#| message: false
#| warning: false
data.table(
  cbind(
    shp.perm.knw$X[,.(Face_Amount_Band,
                      Insurance_Plan)],
    shap=shp.perm.knw$S[,"Insurance_Plan"]
  )
) %>%
  ggplot(aes(y=Face_Amount_Band, x=exp(shap),color=Insurance_Plan,fill=Insurance_Plan)) +
  stat_density_ridges(alpha=0.9/4,scale=1,quantile_lines = T,quantiles = 0.5) + 
  scale_x_continuous(labels = scales::percent,
                     name="Exponentiated SHAP Value (% relative to Offset)",
                     limits = c(NA,1.5)) +
  scale_color_viridis_d() +
  scale_fill_viridis_d() +
  ggtitle(label=paste0("Ridge plot of SHAP values for Effect Insurance_Plan"),
          subtitle = paste0("by face amount band")) +
  theme_minimal()
```



### Next Steps in Modeling

The catboost modeling is informative here for exploratory analytics. We next build an elastic net model which includes the main effects plus the top eight interactions from the catboost analysis. This cutoff is chosen arbitrarily. The top three are stronger than the others, while the next five seem to cluster in the middle. These interactions may turn out to be unneeded. Elastic net modeling will reveal which is truly important in a mortality model.

### Elastic Net Models

The following formula is used throughout all non-PLT, term models.

```{r}

glmnetFormula <- as.formula(
  paste(c("~ -1",
          pred.cols,
          imp.int.perm.knw[order(-score)][Feature1 != "Noise",
                         paste0(Feature1,":",Feature2)]),
        collapse=" + ")
)



print(glmnetFormula)
```

The interactions included in the model are as follows:

```{r}

data.table(Interaction=imp.int.perm.knw[order(-score)][Feature1 != "Noise",
                         paste0(Feature1,":",Feature2)]) %>% 
  flextable()
```

#### Model Fit

```{r}

dat.perm.knw.el <- prepELData(
  formula=glmnetFormula,
  data=dat.perm.knw,
  predictors = pred.cols,
  response = "AE_Amount",
  weights = "ExpDth_Amt_VBT2015",
  #foldid = "FoldID",
  useSparse = T
)


set.seed(cvfit.seed)
if(bUseCache & file.exists(
  'perm.model.knw.el.rds'
) & !bInvalidateCaches)
{
  cvfit.perm.knw <- readRDS('perm.model.knw.el.rds')
} else
{
  cvfit.perm.knw <- fitCVGLMNet(
    dat.perm.knw.el,
    nfolds = 10
  )
  
  if(bUseCache)
    saveRDS(cvfit.perm.knw, 'perm.model.knw.el.rds')
}


```

##### Usual plots for Elastic Net Models

When presenting elastic net models, the cross validation plot for $\lambda$ and the coefficient shrinkage plots are provided.

At the minimum $\lambda$ of `r formatC(cvfit.perm.knw$lambda.min)`, the model has `r length(coef(cvfit.perm.knw,s="lambda.min")@i)` parameters.

::: panel-tabset
###### Lambdas

```{r}
plot(cvfit.perm.knw)
```

###### Coefficient Penalization

```{r}

plot(cvfit.perm.knw$glmnet.fit,xvar="lambda")
```
:::

##### Factor Table

Their exponentiated coefficients are as follows:

```{r}
#| classes: .vscroll .scrollable

reformatCoefs(cvfit.perm.knw, pred.cols)  %>%
  filter(Coef != 0) %>%
  select(Feature1Name,
         Feature1Level,
         Feature2Name,
         Feature2Level,
         Coef) %>%
  mutate(Coef=exp(Coef)) %>%
  flextable() %>%
  set_formatter(
    Coef=function(x) paste0(sprintf("%.01f", 100*x),"%")
  ) %>%
  theme_vanilla()


```

Note that interaction terms must be considered together. For example, UW interacts with Face Amount Band, so these should be considered in combination. The slate of UW without a second feature apply to the base level of Face Amount Band (and any other factor with which UW interacts).

Since penalization is roughly equivalent to Bayesian credibility using a combination of Gaussian and Laplace priors, these factors are arguably credible. This is true even when dealing with factors with small effect sizes, such as the standalone factor for Duration 3.

Plots and tables of effects are much more digestible. As it happens, all but Sex are involved in feature interactions. Those factors can be read from the table above.

In the plots and tables that follow, we fix all of the other variables at their middle values when extracting final factors.

We generate some supporting tables: a factor grid for attaching to the experience, and a list of interactions present in the model

```{r}

dat.perm.knw[,..pred.cols] %>%
  mutate(Face_Amount_Band=fct_drop(Face_Amount_Band)) %>%
  lapply(levels) %>%
  expand.grid() -> 
  dat.perm.knw.grid 

dat.perm.knw.grid %>%
  model.Matrix(
    object=glmnetFormula,
    data=.,
    sparse=T
  ) %>%
  predict(
    cvfit.perm.knw,
    newx=.,
    s="lambda.min"
  ) %>% 
  as.vector() ->
  newCoef

dat.perm.knw.grid %>%
  add_column(
    Factor=exp(newCoef)
  )  %>% 
  setDT() -> 
  dat.perm.knw.grid 

dat.perm.knw.grid %>%
  filter(!(Insurance_Plan == "Perm" & UW == "U/U/U")) %>%
  write.xlsx(
           file="dat.perm.knw.grid.xlsx")

reformatCoefs(cvfit.perm.knw, pred.cols) %>%
  filter(Coef != 0 & !is.na(Feature2Name)) %>% 
  select(Feature1Name,Feature2Name) %>% 
  distinct() %>%
  as.list() %>%
  purrr::list_transpose() ->
  perm.knw.int.list
```

##### Plots of Terms

Below are plots of the 2-way interaction terms, with external factors fixed at their middle values.

Effects tend to be subtle, and the following call out the ones that stand out in the plots. Inspecting the coefficient table will reveal where others are located.

1. Face Amount Band x Sex: The gradient in mortality with increasing face amount band is steeper than for females.
2. Sex x UW: preferred differentials seem to vary by Sex.

::: panel-tabset
```{r}
#| message: false
#| results: asis
#| fig-height: 5
perm.knw.int.list %>%
  map(.f=\(x) {
    plotCVNetCoefs(dat.perm.knw.grid,
               sort(x),
               "Factor",
               pred.cols)
  }
  ) %>%
  purrr::set_names(
    map(perm.knw.int.list, 
        \(x) paste0(x,collapse = " x "))
    ) %>%
  iwalk(~ {
    cat('###### ',.y,'\n\n')
    print(.x)
    cat('\n\n')
  } )

```
:::

##### Tables of Terms

Below are tables of the 2-way interaction terms, with external factors fixed at their middle values.

::: panel-tabset
```{r}
#| message: false
#| results: asis
perm.knw.int.list %>%
  map(.f=\(x) {
    tableCVNetCoefs(dat.perm.knw.grid,
                    sort(x),
                    "Factor",
                    pred.cols = pred.cols) %>%
      flextable() %>%
      set_formatter(values = function(x) {
                  if(is.numeric(x))
                    sprintf( "%.1f%%", x*100 )
                  else
                    x
                  }
                  ) %>%
      set_caption(
        paste0("Factors for ",
               x[1],
               " and ",
               x[2],
               ", All other factors fixed at middle levels")
        ) %>%
      set_table_properties(opts_html=list(
        scroll=list(
          add_css="max-height: 500px;"
          )
        )
        ) %>%
      knitr::knit_print()
  }
  ) %>%
  purrr::set_names(
    map(perm.knw.int.list, 
        \(x) paste0(x,collapse = " x "))
    ) %>%
  generate_tabset(
    tabtitle="Tables of Terms",
    tablevel = 5
  ) %>%
  knitr::knit_child(text=unlist(.),quiet=T) %>%
  cat()

```
:::

#### Goodness-of-Fit

Next comes checking goodness-of-fit, on both a univariate and bivariate basis. Tables are provided which show the ratio of the actual to model predicted deaths and show the associated death counts.

```{r}
#| message: false
dat.perm.knw.grid %>%
  right_join(dat.perm.knw) %>%
  mutate(ExpDth_Amt_GLMNet=ExpDth_Amt_VBT2015*Factor) %>%
  mutate(Factor=NULL) ->
  dat.perm.knw

```

##### Univariate Fit Checks

::: panel-tabset
```{r}
#| message: false
#| results: asis
map(pred.cols,
    .f = \(x) {
      x <- sym(x)
      dat.perm.knw %>%
        group_by(!!x) %>%
        summarize(Death_Count=sum(Death_Count),
                  AM=sum(Death_Claim_Amount)/sum(ExpDth_Amt_GLMNet)) %>%
        flextable() %>%
        set_formatter(
          AM = function(x) {
            if(is.numeric(x))
              sprintf( "%.1f%%", x*100 )
            else
              x
          }
        ) %>%
        colformat_num(j="Death_Count") %>%
        set_header_labels(
          Death_Count = "Death Count",
          AM = "Actual-to-Model"
        ) %>% 
        knitr::knit_print()
    }) %>%
  purrr::set_names(pred.cols) %>%
  generate_tabset(
    tabtitle="Tables of Terms",
    tablevel = 5
  ) %>%
  knitr::knit_child(text=unlist(.),quiet=T) %>%
  cat()

```
:::

Unidimensional goodness-of-fit is generally good, with some spots with poor fit. In some cases, it appears to be related to lack of claims, which may be a sign of overpenalization. In other cases, there are enough claims yet fit is genuinely suboptimal, such as UW U/U/U and N/1/2, level term NLT, and durations 31+, among others.

##### Bivariate Fit Checks

::: panel-tabset
```{r}
#| message: false
#| results: asis
for(i in 1:(length(pred.cols)-1)) {
  for(j in (i+1):length(pred.cols)) {
    if(i == 1 & j==2) {
      pairlist <- data.table(F1=pred.cols[i],F2=pred.cols[j])
    } else {
      pairlist <- rbind(pairlist,
                        data.table(F1=pred.cols[i],F2=pred.cols[j]))
    }
  }
}

map2(.x=pairlist$F1,
     .y=pairlist$F2,
    .f=\(x,y) {
      xs <- sym(x)
      ys <- sym(y)
      
      if( length(dat.perm.knw[,levels(get(x))]) >= 
          length(dat.perm.knw[,levels(get(y))])) {
        fttmp <- dat.perm.knw %>%
          group_by(!!xs,!!ys) %>%
          summarize(Deaths=sum(Death_Count),
                    Ratio=sprintf( "%.1f%%", 
                                   100*sum(Death_Claim_Amount)/sum(ExpDth_Amt_GLMNet) 
                                   )
                    ) %>%
          pivot_wider(names_from=!!ys,
                      values_from=c(Deaths,Ratio),
                      names_glue = paste0(y,": {",y,"}.{.value}"),
                      names_vary = "slowest")
      } else {
        fttmp <- dat.perm.knw %>%
          group_by(!!ys,!!xs) %>%
          summarize(Deaths=sum(Death_Count),
                    Ratio=sprintf( "%.1f%%", 
                                   100*sum(Death_Claim_Amount)/sum(ExpDth_Amt_GLMNet) 
                                   )
                    ) %>%
          pivot_wider(names_from=!!xs,
                      values_from=c(Deaths,Ratio),
                      names_glue = paste0(x,": {",x,"}.{.value}"),
                      names_vary = "slowest")
      }
      
      fttmp.colkeys <- names(fttmp)[1]
      for(i in 1:((length(names(fttmp)) -1)/2) )
      {
        fttmp.colkeys <- c(fttmp.colkeys,
                           paste0("blank",i),
                           names(fttmp)[ (2*i):(2*i+1)])
      }
      
      fttmp %>%
        flextable(col_keys = fttmp.colkeys) %>%
        ftExtra::span_header(sep = "\\.") %>%
        align(i = 1:2, align = 'center' ,part = "header") %>%
        empty_blanks()%>% 
        knitr::knit_print()
    }) %>%
  purrr::set_names(
    pairlist[,paste0(F1," x ",F2)]
    ) %>%
  generate_tabset(
    tabtitle="Tables of Terms",
    tablevel = 5
  ) %>%
  knitr::knit_child(text=unlist(.),quiet=T) %>%
  cat()
```
:::

For the bivariate fit checks, the fit can be great in some cases and poor in others. This could be due to a need for higher level interactions.